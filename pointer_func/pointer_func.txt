<関数ポインタ>
1:ポインタ変数に対して配列演算子を適用することで、ポインタ演算と間接演算の組み合わせをプログラムから減らすことが可能になる。これにより、Cにおいてポインタを使わなければならないコードがかなり減少したのであるが、Cからポインタが不要になったわけではない。特に関数ポインタはプログラムの抽象度を高めるためには必需品である。

関数ポインタは関数のアドレスを格納したポインタ変数のことである。

関数ポインタは、ポイントする関数のプロトタイプに従った型をもつ。関数ポインタの型の書式は以下の通りである。

    返り値の型(*)(パラメータリスト)

例えば、関数 int compare(int x, int y) の型はint (*)(int x, int y)である。パラメータロストから仮引数名を省略して　int (*)(int, int)と記述してもよい。同様に、関数void stop(char *test[], int *result)の型はvoid (*)(char *test[], int *result)またはvoid (*)(char *[], int *)となる。
関数ポインタ変数は、上記の書式(*)内の*に続けて変数名を記述する。

関数ポインタ変数の宣言
    返り値の型 (*変数名)(パラメータリスト)

関数ポインタ変数の宣言は、他の変数宣言と異なり、変数名の後ろにパラメータリストを、()内に変数名を記述しなければならず、コードが複雑でわかりにくい印象を受ける。

関数ポインタ変数に関数（のアドレス）を代入するには、代入演算の右項に関数名を記述する。このとき、関数呼び出しの()はつけない。()をつけると関数のアドレスではなく、関数呼び出しの結果となってしまう。

具体例
    int compare(int x, int y);
    int (*p)(int, int) = compare;  //compare関数へのポインタ変数pを宣言

関数ポインタがポイントしている関数を呼び出すには、間接演算子を適用して取得した関数に対してパラメータリストを与える。あるいは、簡略化された方法として関数ポインタ変数名の直後にパラメータリストを記述する。

関数ポインタがポイントしており関数の呼び出し
    (*変数名)(パラメータリスト); //関数ポインタ経由の呼び出しを明示できる
    または
    変数名(パラメータリスト);  //シンプルに記述できる

関数ポインタ初期化子付きの宣言と呼び出し
    int compare(int x, int y);
    int (*p)(int, int) = compare; //compare関数へのポインタ変数pを宣言
    printf("result of compare(3, 4) = %i\n", (*p)(3, 4));
    printf("result of compare(3, 4) = %i\n", p(3, 4));

=>ch08-11.c


2:関数ポインタの使用方法の一つに、関数呼び出しに対して関数を引数に与えるというものがある。stdlib.hに定義されているqsort関数はクイックソートを実行する関数で、プロトタイプは以下の通りである。

    void qsort(void *base, size_t nmemb, size_t size,
        int (*compare)(const void *, const void*));

qsort関数のパラメータは以下の通りである。
    base -- ソートする値を格納した配列
    nmemb -- 要素数
    size -- 要素のバイト数
    compare -- 第１パラメータと第２パラメータを比較して第１パラメータが大きければ０より大きな整数、小さければ0より小さな整数,等しければ0を返す関数へのポインタ

なお、void*（voidポインター）は型を持たないポインタで、キャストなしでどのような型へのポインタも受け付ける。特にライブラリがパラメータの型としてvoid*を使用している場合は、「呼び出し側の必要に応じてどのような型のポインタでも受け付ける」という意図を持つ。

compare関数ポインタのパラメータリスト内のconstは、ポインタに関して間接演算で値を代入してはならないことを示す修飾子である。constで就職されたポインタ変数に対して間接演算で値を代入するコードを記述すると、コンパイラは「読み出し専用の変数は代入できない」というコンパイルエラーを吐く。

qsort関数の第４パラメータはまさに関数ポインタをパラメータとすることで、呼び出し側が独自のcompare(比較)関数を与えられるようにしている。

=>ch08-12.c

<練習問題8.4>


