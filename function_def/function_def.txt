<関数の定義>
書式：指定子　型名　識別子(パラメータリスト)　複合文

・型名は、関数が返す値の型の名前である。値を返さない関数は特殊な型名のvoidを指定する。

・識別子は、関数の名前である。Cの識別子のルールである英大文字または英小文字または「_」で始まり、英大文字または英小文字または「_」または数字が続く名前である。ユニコードの国際文字を使用することもできる。

・パラメータリストは()内に「,」で区切って型と変数名のペアを並べる。パラメータも関数同様に指定子をつけることができる。
パラメータが1つもない場合にはvoidキーワードを記述する。特にパラメータリスト内のvoidが意味を持つのは関数定義ではなく、関数プロトタイプである。

・複合文は関数本体である。複合文なので0個以上のCの文を{}内に記述して関数の内容を記述する。値を返す関数の場合には、複合分の最後の文は、関数から返値を返すreturn文となる。しかし、Cん文法としては必ずしもreturn文を記述する必要はない。
return文なしで関数が終わった場合、返り値は不定である。（ただし、main関数だけはretun文がなければ0を返す。）return文で終わらない関数は、記述漏れなどのプログラムのバグがほとんどなので、コンパイラは警告を出す。

<EX9.1:関数の定義>
関数定義の指定子にはexternとstaticがある。この2つの指定子は、1つのプログラムが複数のソースファイルから構成される場合に意味を持つ。
externは既定の設定で、他のソースファイルから指定した関数を指出すことができる。staticは、関数を定義したソースファイル内からのみ呼び出せる。
=> ch09-01.c
=> ch09-02.c
ch09-02.cに定義したex2関数をch09-01.cのmain関数から、ch09-01.cに定義したex1関数をch09-02.cのex2関数から、それぞれ呼び出すことができる。
関数プロトタイプを記述しなかった場合、clangはC99違反という警告を出すがコンパイルは成功する。


<演習>
ch09-01.cとch09-02.cそれぞれのソースコードから「extern」指定子を削除してからコンパイル、実行して結果が変わらないことを確認する。

externを指定するということは、複数のファイルに同じ関数を参照させるということである。複数のソースファイルで呼び出す関数についてはヘッダーファイルに関数プロトタイプを記述して、各ソースファイルはヘッダーファイルを#includeディレクティブで取り込むようにする。そうすれば、関数プロトタイプを修正する必要があっても、修正箇所を最大2カ所とすることができる。
少ない記述で済ませる方が、無用なタイプミスなどによるコンパイルエラーを抑制することができる。

関数にstatic指定子を適用すると、その関数を呼び出せるのは同じファイル内の関数に限定される。

次の2つのプログラムは、staticを指定した関数がコンパイラによってどう扱われるかを示している。
=> ch09-03.c
=> ch09-04.c
ch09-04.cに定義したex2関数をch09-03.cのmain関数から呼び出しているが、ex1関数は2つのソースファイル内でstatic指定子をつけて定義している。static指定子は関数を定義したソースファイル内に閉じ込める。そのため、ch09−03.cのmainから呼び出すex1関数はch09-03.cで定義したex1関数、ch09-04.cのex2関数から呼び出すex1関数はch09-04.cで定義したex1関数となる。